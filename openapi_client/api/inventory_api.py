"""
    Yourkeys Public API

    This API exposes endpoints that can be used to interact with the Yourkeys system  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@yourkeys.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.blocks_response import BlocksResponse
from openapi_client.model.create_blocks_request import CreateBlocksRequest
from openapi_client.model.create_blocks_response import CreateBlocksResponse
from openapi_client.model.create_developments_request import CreateDevelopmentsRequest
from openapi_client.model.create_developments_response import CreateDevelopmentsResponse
from openapi_client.model.create_plots_request import CreatePlotsRequest
from openapi_client.model.create_plots_response import CreatePlotsResponse
from openapi_client.model.delete_blocks_request import DeleteBlocksRequest
from openapi_client.model.delete_blocks_response import DeleteBlocksResponse
from openapi_client.model.delete_plots_request import DeletePlotsRequest
from openapi_client.model.delete_plots_response import DeletePlotsResponse
from openapi_client.model.get_plots_response import GetPlotsResponse
from openapi_client.model.inventory_developments_response import InventoryDevelopmentsResponse
from openapi_client.model.problem_details import ProblemDetails
from openapi_client.model.set_development_live_flag_request import SetDevelopmentLiveFlagRequest
from openapi_client.model.update_blocks_request import UpdateBlocksRequest
from openapi_client.model.update_blocks_response import UpdateBlocksResponse
from openapi_client.model.update_developments_request import UpdateDevelopmentsRequest
from openapi_client.model.update_developments_response import UpdateDevelopmentsResponse
from openapi_client.model.update_plots_request import UpdatePlotsRequest
from openapi_client.model.update_plots_response import UpdatePlotsResponse


class InventoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_inventory_blocks_delete(
            self,
            **kwargs
        ):
            """api_inventory_blocks_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_blocks_delete(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                delete_blocks_request (DeleteBlocksRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeleteBlocksResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_blocks_delete = _Endpoint(
            settings={
                'response_type': (DeleteBlocksResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/blocks',
                'operation_id': 'api_inventory_blocks_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_blocks_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_blocks_request':
                        (DeleteBlocksRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_blocks_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_blocks_delete
        )

        def __api_inventory_blocks_post(
            self,
            **kwargs
        ):
            """api_inventory_blocks_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_blocks_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                create_blocks_request (CreateBlocksRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateBlocksResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_blocks_post = _Endpoint(
            settings={
                'response_type': (CreateBlocksResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/blocks',
                'operation_id': 'api_inventory_blocks_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_blocks_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_blocks_request':
                        (CreateBlocksRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_blocks_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_blocks_post
        )

        def __api_inventory_blocks_put(
            self,
            **kwargs
        ):
            """api_inventory_blocks_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_blocks_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                update_blocks_request (UpdateBlocksRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UpdateBlocksResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_blocks_put = _Endpoint(
            settings={
                'response_type': (UpdateBlocksResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/blocks',
                'operation_id': 'api_inventory_blocks_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_blocks_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_blocks_request':
                        (UpdateBlocksRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_blocks_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_blocks_put
        )

        def __api_inventory_development_livestatusupdate_put(
            self,
            **kwargs
        ):
            """api_inventory_development_livestatusupdate_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_development_livestatusupdate_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                set_development_live_flag_request (SetDevelopmentLiveFlagRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_development_livestatusupdate_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/development/livestatusupdate',
                'operation_id': 'api_inventory_development_livestatusupdate_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'set_development_live_flag_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'set_development_live_flag_request':
                        (SetDevelopmentLiveFlagRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'set_development_live_flag_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_development_livestatusupdate_put
        )

        def __api_inventory_developments_post(
            self,
            **kwargs
        ):
            """api_inventory_developments_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_developments_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                create_developments_request (CreateDevelopmentsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateDevelopmentsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_developments_post = _Endpoint(
            settings={
                'response_type': (CreateDevelopmentsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/developments',
                'operation_id': 'api_inventory_developments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_developments_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_developments_request':
                        (CreateDevelopmentsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_developments_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_developments_post
        )

        def __api_inventory_developments_put(
            self,
            **kwargs
        ):
            """api_inventory_developments_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_developments_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                update_developments_request (UpdateDevelopmentsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UpdateDevelopmentsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_developments_put = _Endpoint(
            settings={
                'response_type': (UpdateDevelopmentsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/developments',
                'operation_id': 'api_inventory_developments_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_developments_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_developments_request':
                        (UpdateDevelopmentsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_developments_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_developments_put
        )

        def __api_inventory_housebuilder_seller_reference_development_development_id_block_block_id_plots_get(
            self,
            seller_reference,
            development_id,
            block_id,
            **kwargs
        ):
            """api_inventory_housebuilder_seller_reference_development_development_id_block_block_id_plots_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_housebuilder_seller_reference_development_development_id_block_block_id_plots_get(seller_reference, development_id, block_id, async_req=True)
            >>> result = thread.get()

            Args:
                seller_reference (str, none_type):
                development_id (str, none_type):
                block_id (str, none_type):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetPlotsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['seller_reference'] = \
                seller_reference
            kwargs['development_id'] = \
                development_id
            kwargs['block_id'] = \
                block_id
            return self.call_with_http_info(**kwargs)

        self.api_inventory_housebuilder_seller_reference_development_development_id_block_block_id_plots_get = _Endpoint(
            settings={
                'response_type': (GetPlotsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/housebuilder/{sellerReference}/development/{developmentId}/block/{blockId}/plots',
                'operation_id': 'api_inventory_housebuilder_seller_reference_development_development_id_block_block_id_plots_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'seller_reference',
                    'development_id',
                    'block_id',
                ],
                'required': [
                    'seller_reference',
                    'development_id',
                    'block_id',
                ],
                'nullable': [
                    'seller_reference',
                    'development_id',
                    'block_id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'seller_reference':
                        (str, none_type,),
                    'development_id':
                        (str, none_type,),
                    'block_id':
                        (str, none_type,),
                },
                'attribute_map': {
                    'seller_reference': 'sellerReference',
                    'development_id': 'developmentId',
                    'block_id': 'blockId',
                },
                'location_map': {
                    'seller_reference': 'path',
                    'development_id': 'path',
                    'block_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_inventory_housebuilder_seller_reference_development_development_id_block_block_id_plots_get
        )

        def __api_inventory_housebuilder_seller_reference_development_development_id_blocks_get(
            self,
            seller_reference,
            development_id,
            **kwargs
        ):
            """api_inventory_housebuilder_seller_reference_development_development_id_blocks_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_housebuilder_seller_reference_development_development_id_blocks_get(seller_reference, development_id, async_req=True)
            >>> result = thread.get()

            Args:
                seller_reference (str, none_type):
                development_id (str, none_type):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BlocksResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['seller_reference'] = \
                seller_reference
            kwargs['development_id'] = \
                development_id
            return self.call_with_http_info(**kwargs)

        self.api_inventory_housebuilder_seller_reference_development_development_id_blocks_get = _Endpoint(
            settings={
                'response_type': (BlocksResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/housebuilder/{sellerReference}/development/{developmentId}/blocks',
                'operation_id': 'api_inventory_housebuilder_seller_reference_development_development_id_blocks_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'seller_reference',
                    'development_id',
                ],
                'required': [
                    'seller_reference',
                    'development_id',
                ],
                'nullable': [
                    'seller_reference',
                    'development_id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'seller_reference':
                        (str, none_type,),
                    'development_id':
                        (str, none_type,),
                },
                'attribute_map': {
                    'seller_reference': 'sellerReference',
                    'development_id': 'developmentId',
                },
                'location_map': {
                    'seller_reference': 'path',
                    'development_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_inventory_housebuilder_seller_reference_development_development_id_blocks_get
        )

        def __api_inventory_housebuilder_seller_reference_developments_get(
            self,
            seller_reference,
            **kwargs
        ):
            """api_inventory_housebuilder_seller_reference_developments_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_housebuilder_seller_reference_developments_get(seller_reference, async_req=True)
            >>> result = thread.get()

            Args:
                seller_reference (str, none_type):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InventoryDevelopmentsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['seller_reference'] = \
                seller_reference
            return self.call_with_http_info(**kwargs)

        self.api_inventory_housebuilder_seller_reference_developments_get = _Endpoint(
            settings={
                'response_type': (InventoryDevelopmentsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/housebuilder/{sellerReference}/developments',
                'operation_id': 'api_inventory_housebuilder_seller_reference_developments_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'seller_reference',
                ],
                'required': [
                    'seller_reference',
                ],
                'nullable': [
                    'seller_reference',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'seller_reference':
                        (str, none_type,),
                },
                'attribute_map': {
                    'seller_reference': 'sellerReference',
                },
                'location_map': {
                    'seller_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_inventory_housebuilder_seller_reference_developments_get
        )

        def __api_inventory_plots_delete(
            self,
            **kwargs
        ):
            """api_inventory_plots_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_plots_delete(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                delete_plots_request (DeletePlotsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeletePlotsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_plots_delete = _Endpoint(
            settings={
                'response_type': (DeletePlotsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/plots',
                'operation_id': 'api_inventory_plots_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_plots_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_plots_request':
                        (DeletePlotsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_plots_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_plots_delete
        )

        def __api_inventory_plots_post(
            self,
            **kwargs
        ):
            """api_inventory_plots_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_plots_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                create_plots_request (CreatePlotsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreatePlotsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_plots_post = _Endpoint(
            settings={
                'response_type': (CreatePlotsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/plots',
                'operation_id': 'api_inventory_plots_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_plots_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_plots_request':
                        (CreatePlotsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_plots_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_plots_post
        )

        def __api_inventory_plots_put(
            self,
            **kwargs
        ):
            """api_inventory_plots_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_inventory_plots_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                update_plots_request (UpdatePlotsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UpdatePlotsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_inventory_plots_put = _Endpoint(
            settings={
                'response_type': (UpdatePlotsResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/api/Inventory/plots',
                'operation_id': 'api_inventory_plots_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_plots_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_plots_request':
                        (UpdatePlotsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_plots_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__api_inventory_plots_put
        )
